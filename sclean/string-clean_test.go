package sclean

import (
	"fmt"
	"testing"
)

func TestUnixSafeFilename(t *testing.T) {

	expected := "_-_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwx"
	cleaned := UnixSafeFilename(allChars(1024))

	if cleaned != expected {
		t.Error("UnixSafeFilename failed: got: " + cleaned + " want: " + expected)
	} else {
		println("UnixSafeFilename passed")
	}
}

func TestAlphaOnly(t *testing.T) {

	expected := "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
	cleaned := AlphaOnly(allChars(1024))
	if cleaned != expected {
		t.Error("AlphaOnly failed: got: " + cleaned + " want: " + expected)
	} else {
		println("AlphaOnly passed")
	}
}

func TestNumOnly(t *testing.T) {

	expected := "0123456789"
	cleaned := NumOnly(allChars(1024))
	if cleaned != expected {
		t.Error("NumOnly failed: got: " + cleaned + " want: " + expected)
	} else {
		println("NumOnly passed")
	}
}

func TestAlphaNumOnly(t *testing.T) {

	expected := "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
	cleaned := AlphaNumOnly(allChars(1024))
	if cleaned != expected {
		t.Error("AlphaNumOnly failed: got: " + cleaned + " want: " + expected)
	} else {
		println("AlphaNumOnly passed")
	}
}

func TestUnixPreFilter(t *testing.T) {

	expected := "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz"
	cleaned := UnixPreFilter(allChars(1024))

	if cleaned != expected {
		t.Error("UnixPreFilter failed: got: " + cleaned + " want: " + expected)
	} else {
		println("UnixPreFilter passed")
	}
}

func TestTruncateStringEllipsis(t *testing.T) {

	expected := "The quick brown fox jumps over the lazy dog The rain in spain..."
	cleaned := TruncateStringEllipsis(testPhrase(), 64)

	if cleaned != expected || len(cleaned) != 64 {
		t.Error("TruncateStringEllipsis failed: got: " + cleaned + " want: " + expected)
	} else {
		println("TruncateStringEllipsis passed")
	}
}

func TestTruncateString(t *testing.T) {

	expected := "The quick brown fox jumps over the lazy dog The rain in spain fa"
	cleaned := TruncateString(testPhrase(), 64)

	if cleaned != expected || len(cleaned) != 64 {
		t.Error("TruncateString failed: got: " + cleaned + " want: " + expected)
	} else {
		println("TruncateString passed")
	}
}

func TestStripControlAndSpecial(t *testing.T) {

	expected := " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
	cleaned := StripControlAndSpecial(allChars(1024))

	if cleaned != expected {
		t.Error("StripControlAndSpecial failed: got: " + cleaned + " want: " + expected)
	} else {
		println("StripControlAndSpecial passed")
	}
}

func TestSubControlAndSpecial(t *testing.T) {

	expected := "?????????  ?? ?????????????????? !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~
	cleaned := SubControlAndSpecial(allChars(1024))

	if cleaned != expected {
		t.Error("SubControlAndSpecial failed: got: " + cleaned + " want: " + expected)
	} else {
		println("SubControlAndSpecial passed")
	}
}

func TestStripControlAndSubSpecial(t *testing.T) {
	expected := "    !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}"
	cleaned := StripControlAndSubSpecial(allChars(127))

	if cleaned != expected {
		t.Error("StripControlAndSubSpecial failed: got: " + cleaned + " want: " + expected)
	} else {
		println("StripControlAndSubSpecial passed")
	}
}

func TestStripControl(t *testing.T) {

	expected := " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}"
	cleaned := StripControl(allChars(127))

	if cleaned != expected {
		t.Error("StripControl failed: got: " + cleaned + " want: " + expected)
	} else {
		println("StripControl passed")
	}
}

func TestEscapeDiscordMarkdown(t *testing.T) {
	input := "This is *italics* and **bold** and ***bold italics***. Also, _underline_ and __underline bold__. And, __underline bold italics__ and _underline italics bold_. Also, `inline code` and ```preformatted code```."
	expected := "This is \\*italics\\* and \\*\\*bold\\*\\* and \\*\\*\\*bold italics\\*\\*\\*. Also, \\_underline\\_ and \\_\\_underline bold\\_\\_. And, \\_\\_underline bold italics\\_\\_ and \\_underline italics bold\\_. Also, \\`inline code\\` and \\`\\`\\`preformatted code\\`\\`\\`."
	cleaned := EscapeDiscordMarkdown(input)

	if cleaned != expected {
		t.Error("EscapeDiscordMarkdown failed: got: " + cleaned + " want: " + expected)
	} else {
		println("EscapeDiscordMarkdown passed")
	}
}

func TestRemoveDiscordMarkdown(t *testing.T) {
	input := "This is *italics* and **bold** and ***bold italics***. Also, _underline_ and __underline bold__. And, __underline bold italics__ and _underline italics bold_. Also, `inline code` and ```preformatted code```."
	expected := "This is italics and bold and bold italics. Also, underline and underline bold. And, underline bold italics and underline italics bold. Also, inline code and preformatted code."
	cleaned := RemoveDiscordMarkdown(input)

	if cleaned != expected {
		t.Error("RemoveDiscordMarkdown failed: got: " + cleaned + " want: " + expected)
	} else {
		println("RemoveDiscordMarkdown passed")
	}
}

func TestRemoveFactorioTags(t *testing.T) {
	input := "[color=red]Dude![/color] [font=default-bold]check this out![/font] [gps=0,0] is that a infinite chest of [item=iron-plate]iron plate?"
	expected := "Dude! check this out! [gps=0,0] is that a infinite chest of [item=iron-plate]iron plate?"
	cleaned := RemoveFactorioTags(input)

	if cleaned != expected {
		t.Error("RemoveFactorioTags failed: got: " + cleaned + " want: " + expected)
	} else {
		println("RemoveFactorioTags passed")
	}
}

/* generate strings for tests */
func allChars(s int) string {
	testStr := ""
	for i := 1; i < s; i++ {
		t := fmt.Sprintf("%c", i)
		testStr = testStr + t
	}
	return testStr
}

func testPhrase() string {
	string := "The quick brown fox jumps over the lazy dog "
	string = string + "The rain in spain falls mainly on the plain "
	string = string + "lorum ipsum dolor sit amet "
	return string
}
